' Gambas class file

Public MLI As Label[]
Public MTI As TextBox[]
Public AktivModulePath As String[]
Public ScrollView1 As ScrollView

Public Sub Button1_Click()
  
  ' Dim s As String
  
  FScoarboardPreview.Show()
  FScoarboardPreview.x = Me.x + Me.w
  SetXML()
  Print "test"
  FScoarboardPreview.makeFinishOverlay("/tmp/Images.xml", ButtonBox1.text)
Catch
  ' If Error.code = 6 Or Error.code = -1 Then
  '   Message.Error("Please Check the Input\nand down't forget the inputs of the round of the game.")
  ' Else 
  Message.Error(Error.Text & "\n" & Error.Where)
  ' Endif
  
End

Public Sub Form_Show()
  
  Dim s As String[]
  ' Dim xml As XmlDocument
  
  AktivModulePath = New String[]
  MTI = New TextBox[]
  MLI = New Label[]
  ScrollView1 = New ScrollView(Me)
  
  With ScrollView1
    .x = 0
    .y = 42
    .w = 448
    .H = 168
    
  End With
  
  ' ActivModulePath = Split(File.Load(User.Home & "/.scoreboard/AktivModule.mod"), "|")
  s = Split(File.Load(User.home & "/.Scoreboard/Config.module"), "/|", "", True)
  While s.Count > 0 
    If s[0] = "Basic" Then s[1] = "False"
    If Val(s[1]) Then
      
      If Exist(User.home & "/.local/lib/scoreboard/module/" & s[0]) Then
        AktivModulePath.Add(User.home & "/.local/lib/scoreboard/module/" & s[0])
      Else
        AktivModulePath.Add("/usr/lib/Scoarbord/module/" & s[0])
      Endif
    Endif
    s.Remove(0)
    s.Remove(0)
  Wend
  Print s
  loadModule(AktivModulePath)
  
End

Public Sub loadModule(AktivModulePat As String[])
  
  Dim s As String
  Dim Xml As XmlDocument
  Dim Elements As XmlElement[]
  Dim Element As XmlElement
  Dim t As TextBox
  Dim lastY As Integer
  Dim l As Label
  
  lastY = 0
  
  For Each s In AktivModulePat
    Xml = New XmlDocument(s & "/ModuleCall.xml")
    Elements = Xml.GetElementsByTagName("Text")
    For Each Element In Elements
      t = New TextBox(ScrollView1)
      With t
        .Tag = Element.GetAttribute("Description")
        .Tooltip = Element.GetAttribute("Description")
        .h = 28
        .w = 112
        .x = 5
        .y = 5 + lastY 
      End With
      l = New Label(ScrollView1)
      With l
        .Tag = Element.GetAttribute("Description")
        .Text = Element.GetAttribute("Description")
        .h = 28
        .w = 112
        .x = 5 + t.w + 5
        .y = 5 + lastY 
      End With
      lastY = t.Y + t.h
      MTI.Add(t)
    Next
  Next
  
End

Public Sub ButtonBox1_Click()
  
  Dialog.Title = Label5.Text
  Dialog.Filter = ["*.png", "PNG Pictures"]
  If Not Dialog.SaveFile() Then ButtonBox1.text = Dialog.Path 
  
End

Public Sub SetXML()
  
  Dim Doc As XmlDocument
  Dim s As String
  Dim XmlModule As XmlDocument
  Dim xModuleElement As XmlElement
  Dim Element As XmlElement
  Dim Elements As XmlElement[]
  ' Dim xModuleElements As XmlElement
  Dim ElementModul As XmlElement
  Dim text As XmlElement
  
  Doc = New XmlDocument
  
  For Each s In AktivModulePath
    
    Elements = xmlfill(s)
    ElementModul = Doc.CreateElement("a")
    Doc.Root.AppendChild(ElementModul)
    text = Doc.CreateElement("Text")
    ElementModul.AppendChild(text)
    For Each Element In Elements
      
      text.AppendChild(Element)
    Next
    Wait 0.1
    XmlModule = New XmlDocument(s & "/ModuleCall.xml")
    For Each xModuleElement In XmlModule.GetElementsByTagName("Images")
      text = Doc.CreateElement("Images")
      ElementModul.AppendChild(text)
      ElementModul.TagName = xModuleElement.GetAttribute("module")
      text.SetAttribute("IMGPath", s & "/" & xModuleElement.GetAttribute("IMGPath"))
      text.SetAttribute("X", xModuleElement.GetAttribute("X"))
      text.SetAttribute("Y", xModuleElement.GetAttribute("Y"))
      
      ' Doc.Root.AppendChild(xModuleElement)
    Next
    
  Next
  ElementModul = Doc.CreateElement("Basic")
  Doc.Root.AppendChild(ElementModul)
  For Each Element In setBasic()
    ElementModul.AppendChild(Element)
  Next
  Doc.Save("/tmp/Images.xml")
  'File.Save("/tmp/test.2", Doc.ToString(True))
  
End

Public Sub xmlfill(s As String) As XmlElement[]
  
  Dim XmlModule As XmlDocument
  Dim xModuleElement As XmlElement
  Dim txtb As TextBox
  Dim Element As XmlElement
  Dim Elements As XmlElement[]
  Dim xml As XmlDocument
  
  xml = New XmlDocument
  Elements = New XmlElement[]
  XmlModule = New XmlDocument(s & "/ModuleCall.xml")
  For Each xModuleElement In XmlModule.GetElementsByTagName("Text")
    
    For Each txtb In MTI
      
      If txtb.tag = xModuleElement.GetAttribute("Description") Then
        
        Element = New XmlElement("Txt")
        
        Element.SetAttribute("Text", txtb.Text)
        Element.SetAttribute("X", xModuleElement.GetAttribute("X"))
        Element.SetAttribute("Y", xModuleElement.GetAttribute("Y"))
        Element.SetAttribute("Font", xModuleElement.GetAttribute("Font"))
        Elements.Add(Element)
        Break
      Endif
      
    Next
    
  Next
  
  ' For Each Element In Elements
  '   xml.Root.AppendChild(Element)
  ' Next
  ' xml.Save("/tmp/Text.xml")
  ' File.Save("/tmp/test.1", xml.ToString(True))
  Return Elements
  
End

Public Sub setBasic() As XmlElement[]
  
  Dim Element As XmlElement
  Dim Elements As New XmlElement[]
  
  Element = New XmlElement("Text")
  Element.SetAttribute("Text", TournamentRound.Text)
  Element.SetAttribute("X", TRX.Text)
  Element.SetAttribute("Y", TRY.text)
  Element.SetAttribute("Font", "Tarrget Academy,40")
  Elements.Add(Element)
  Element = New XmlElement("Text")
  Element.SetAttribute("Text", Tournament.Text)
  Element.SetAttribute("X", TX.Text)
  Element.SetAttribute("Y", TY.Text)
  Element.SetAttribute("Font", "Tarrget Academy,50")
  Elements.Add(Element)
  Return Elements
  
End
