' Gambas class file

Public MLI As Label[]
Public MTI As TextBox[]
Public MLC As ComboBox[]
Public MTC As Label[]
Public AktivModulePath As String[]

Public Sub Button1_Click() ''Make with the Informations of the form the Finish Overlay

  ' Dim s As String

  FScoarboardPreview.Show()
  FScoarboardPreview.x = Me.x + Me.w
  SetXML()
  Print "test"
  FScoarboardPreview.makeFinishOverlay("/tmp/Images.xml", ButtonBox1.text)
Catch
  ' If Error.code = 6 Or Error.code = -1 Then
  '   Message.Error("Please Check the Input\nand down't forget the inputs of the round of the game.")
  ' Else
  Message.Error(Error.Text & "\n" & Error.Where)
  ' Endif

End

Public Sub Form_Show() ''Detection of the active modules

  Dim s As String[]
  ' Dim xml As XmlDocument

  AktivModulePath = New String[]
  MTI = New TextBox[]
  MLI = New Label[]
  MLC = New ComboBox[]
  MTC = New Label[]

  ' ActivModulePath = Split(File.Load(User.Home & "/.scoreboard/AktivModule.mod"), "|")
  If Exist(User.home & "/.Scoreboard/Config.module") Then
    s = Split(File.Load(User.home & "/.Scoreboard/Config.module"), "/|", "", True)
    While s.Count > 0
      If s[0] = "Basic" Then s[1] = "False"
      If Val(s[1]) Then

        If Exist(User.home & "/.local/lib/scoreboard/module/" & s[0]) Then
          AktivModulePath.Add(User.home & "/.local/lib/scoreboard/module/" & s[0])
        Else
          AktivModulePath.Add("/usr/lib/Scoarbord/module/" & s[0])
        Endif
      Endif
      s.Remove(0)
      s.Remove(0)
    Wend
    Print s
  Endif
  loadModule(AktivModulePath)


End

Public Sub loadModule(AktivModulePat As String[]) ''Load the Active Modules for get Informations of the Required text and create the Textboxes for Input of the Required Informations

  Dim s As String
  Dim Xml As XmlDocument
  Dim Elements As XmlElement[]
  Dim Element As XmlElement
  Dim t As TextBox
  Dim lastY As Integer
  Dim l As Label
  Dim c As ComboBox
  Dim lasty2 As Integer
  Dim sp As Separator

  lastY = 0
  lasty2 = 0

  For Each s In AktivModulePat
    Xml = New XmlDocument(s & "/ModuleCall.xml")
    Elements = Xml.GetElementsByTagName("Text")
    For Each Element In Elements
      t = New TextBox(ScrollView1)
      With t
        .Tag = Element.GetAttribute("Description")
        .Tooltip = Element.GetAttribute("Description")
        .h = 28
        .w = 112
        .x = 5
        .y = 5 + lastY
      End With
      l = New Label(ScrollView1)
      With l
        .Tag = Element.GetAttribute("Description")
        .Text = Element.GetAttribute("Description")
        .h = 28
        .w = 112
        .x = 5 + t.w + 5
        .y = 5 + lastY
      End With
      lastY = t.Y + t.h
      MTI.Add(t)
    Next
    sp = New Separator(ScrollView1)
    With sp
      .y = lastY + 10
      .W = ScrollView2.w
    End With
    lasty += 20

    Elements = xml.GetElementsByTagName("List")
    For Each Element In Elements
      c = New ComboBox(ScrollView2)
      With c
        .Tag = Element.GetAttribute("Name")
        .Tooltip = Element.GetAttribute("Name")
        .h = 28
        .W = 300
        .x = 5
        .y = 5 + lasty2
        .List = Split(Element.GetAttribute("List"), ";")
        .Index = .Find(Element.GetAttribute("Default"))

      End With
      l = New Label(ScrollView2)
      With l
        .Tag = Element.GetAttribute("Name")
        .Tooltip = Element.GetAttribute("Name")
        .h = 28
        .W = 112
        .x = 5 + 5 + c.w
        .y = 5 + lasty2
      End With
      lasty2 = c.y + c.H
      MLC.Add(C)
    Next
    sp = New Separator(ScrollView2)
    With sp
      .y = lastY2 + 10
      .W = ScrollView2.w
    End With
    lasty2 += 20
  Next

End

Public Sub ButtonBox1_Click()

  Dialog.Title = Label5.Text
  Dialog.Filter = ["*.png", "PNG Pictures"]
  If Not Dialog.SaveFile() Then ButtonBox1.text = Dialog.Path

End

''-----------------
''|Upcoming change|
''-----------------

Public Sub SetXML() ''Fill the Finish Informations in a Xml File

  Dim Doc As XmlDocument
  Dim s As String
  Dim XmlModule As XmlDocument
  Dim xModuleElement As XmlElement
  Dim Element As XmlElement
  Dim Elements As XmlElement[]
  ' Dim xModuleElements As XmlElement
  Dim ElementModul As XmlElement
  Dim text As XmlElement
  Dim c As ComboBox

  Doc = New XmlDocument

  For Each s In AktivModulePath

    Elements = xmlfill(s)
    ElementModul = Doc.CreateElement("a")
    Doc.Root.AppendChild(ElementModul)
    text = Doc.CreateElement("Text")
    ElementModul.AppendChild(text)
    For Each Element In Elements

      text.AppendChild(Element)
    Next
    Wait 0.1
    XmlModule = New XmlDocument(s & "/ModuleCall.xml")
    For Each xModuleElement In XmlModule.GetElementsByTagName("Images")
      text = Doc.CreateElement("Images")
      ElementModul.AppendChild(text)
      ElementModul.TagName = xModuleElement.GetAttribute("module")
      text.SetAttribute("IMGPath", s & "/" & xModuleElement.GetAttribute("IMGPath"))
      text.SetAttribute("X", xModuleElement.GetAttribute("X"))
      text.SetAttribute("Y", xModuleElement.GetAttribute("Y"))

      ' Doc.Root.AppendChild(xModuleElement)
    Next
    For Each xModuleElement In XmlModule.GetElementsByTagName("List")

      For Each c In MLC

        If c.Tag = xModuleElement.GetAttribute("Name") Then
          text = Doc.CreateElement("Images")
          ElementModul.AppendChild(text)
          ElementModul.TagName = xModuleElement.GetAttribute("module")
          text.SetAttribute("IMGPath", User.Home & "/.local/lib/scoreboard/module/" & c.Text)
          text.SetAttribute("X", xModuleElement.GetAttribute("x"))
          text.SetAttribute("Y", xModuleElement.GetAttribute("y"))
        Endif

      Next

    Next

  Next
  ElementModul = Doc.CreateElement("Basic")
  Doc.Root.AppendChild(ElementModul)
  For Each Element In setBasic()
    ElementModul.AppendChild(Element)
  Next
  Doc.Save("/tmp/Images.xml")
  'File.Save("/tmp/test.2", Doc.ToString(True))

End

''-----------------
''|Upcoming change|
''-----------------

Public Sub xmlfill(s As String) As XmlElement[] '' Fill the Required Text In Xml Elements

  Dim XmlModule As XmlDocument
  Dim xModuleElement As XmlElement
  Dim txtb As TextBox
  Dim Element As XmlElement
  Dim Elements As XmlElement[]
  Dim xml As XmlDocument

  xml = New XmlDocument
  Elements = New XmlElement[]
  XmlModule = New XmlDocument(s & "/ModuleCall.xml")
  For Each xModuleElement In XmlModule.GetElementsByTagName("Text")

    For Each txtb In MTI

      If txtb.tag = xModuleElement.GetAttribute("Description") Then

        Element = New XmlElement("Txt")

        Element.SetAttribute("Text", txtb.Text)
        Element.SetAttribute("X", xModuleElement.GetAttribute("X"))
        Element.SetAttribute("Y", xModuleElement.GetAttribute("Y"))
        Element.SetAttribute("Font", xModuleElement.GetAttribute("Font"))
        Elements.Add(Element)
        Break
      Endif

    Next

  Next

  ' For Each Element In Elements
  '   xml.Root.AppendChild(Element)
  ' Next
  ' xml.Save("/tmp/Text.xml")
  ' File.Save("/tmp/test.1", xml.ToString(True))
  Return Elements

End

''-----------------
''|Upcoming change|
''-----------------
Public Sub setBasic() As XmlElement[] ''Set the Basic Information

  Dim Element As XmlElement
  Dim Elements As New XmlElement[]

  Element = New XmlElement("Text")
  Element.SetAttribute("Text", TournamentRound.Text)
  Element.SetAttribute("X", TRX.Text)
  Element.SetAttribute("Y", TRY.text)
  Element.SetAttribute("Font", "Tarrget Academy,40")
  Elements.Add(Element)
  Element = New XmlElement("Text")
  Element.SetAttribute("Text", Tournament.Text)
  Element.SetAttribute("X", TX.Text)
  Element.SetAttribute("Y", TY.Text)
  Element.SetAttribute("Font", "Tarrget Academy,50")
  Elements.Add(Element)
  Return Elements

End
